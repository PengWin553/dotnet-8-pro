============= SETUP ===============

1. Install Visual Studio Code
2. Install Visual Studio (Community Version)
    - Install ASP.NET and web development
    - Azure development
2. Install SQL Server 2022 (Express Version)
    - Basic
        - Install SSMS

============= CREATE DOTNET PROJECT FOLDER ===============

 > Type in the terminal:
    dotnet new webapi -o api
 > Go inside the 'api' folder you just created
    cd api

============== RUNNING THE DOTNET API Code ============
> Type in the terminal:
    dotnet watch run

> Refreshing / Reloading the terminal after running the program:
    ctrl + r

================ ABOUT THE Program.cs =================
    - In ASP.NET Core 8 (and earlier versions), Program.cs serves as the entry point and configuration hub of your web application. 
      It's where you set up and configure all the essential components of your ASP.NET Core application.
    
    - More about the Program.cs in the docs/aboutProgramDotCs.txt

================ NECESSARY EXTENSIONS =================

1. C#
2. C# Dev Kit
3. NET Install Tool
4. Nuget Gallery
5. Prettier
6. .NET Extension Pack
7. C# Extensions JosKreativ

=================== INSTALL ENTITY FRAMEWORK ===========
1. press ctrl + shift + p
2. Type the following to go to the Nuget Gallery:
    > nuget
3. Install: 
    1. Microsoft.EntityFramworkCore.SqlServer (Version 8.0 / It depends on you. The version should match with your configuration in the asp.csproj)
    2. Microsoft.EntityFrameworkCore.Tools (Version 8.0 / It depends on you. The version should match with your configuration in the asp.csproj)
    3. Microsoft.EntityFrameworkCore.Design (Version 8.0 / It depends on you. The version should match with your configuration in the asp.csproj)

================= DATABASE CONNECTION STRING TEMPLATE (FOR Microsoft SQL Server) =====================

"Data Source={PCNAME}\\SQLEXPRESS;Initial Catalog={DATABASENAME};Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False"

================== MIGRATION (to make the code generate a database for you) ================ 
  1. Initial Database Creation (First Time Setup)
    # Creates your FIRST migration snapshot (named 'init')
        > dotnet ef migrations add init

    # Applies the migration to create the database and all tables
        > dotnet ef database update

    ? What this does:
                        - Generates a /Migrations folder with init.cs
                        - Creates the database with tables for all your current models
                        - Adds an __EFMigrationsHistory table to track migrations

  2. When Adding a New Model/Table (Later Changes)
    # Create a NEW migration with a descriptive name
    >   dotnet ef migrations add AddCommentTable

    # Apply the changes to the database
    >   dotnet ef database update

    ? Key Points:
        ! Never reuse init for new changes (creates duplicate tables)
        - Use meaningful names like:
                                    AddProductTable, AddEmailColumnToUser, RemovePhoneNumberColumn
           - Will create tables:    [Products] ....


    W A R N I N G: 
        - One migration per change (add table, modify column, etc.)
        - Never manually edit old migrations
        - Check pending migrations with: 
            > dotnet ef migrations list

  3. Undo a Migration:
        - dotnet ef database update LastGoodMigrationName


====================== SETUP JWT ================

Install these using NuGet:

    - Microsoft.Extensions.Identity.Core
    - Microsoft.AspNetCore.Identity.EntityFrameworkCore
    - Microsoft.AspNetCore.Authentication.JwtBearer

