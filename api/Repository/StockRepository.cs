using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using api.Interfaces; // add this manually if shortcut does not work
using api.Models; // add this manually if shortcut does not work
using Microsoft.EntityFrameworkCore; // add this manually
using api.Data; // add this manually
using api.Dto.Stock;
using api.Helpers; // add this manully

namespace api.Repository
{
    public class StockRepository : IStockRepository // the child code (the iterface here) was automatically generated by hovering on the 'IStockRepository' and pressing ctrl + . If not working, you need to manually supply the interface here, like the code below. Do not forget to add the using api.Interfaces; using api.Models;
    {
        // BOILERPLATE : add this manually if shortcut does not work
        // public Task<List<Stock>> GetAllAsync()
        // {
            
        // }

        private readonly ApplicationDBContext _context;

        // THIS IS DEPENDENCY INJECTION - constructor injection
        public StockRepository(ApplicationDBContext context){
            _context = context;
        }

        public async Task<List<Stock>> GetAllAsync(QueryObject query)
        {
            var stocks = _context.Stocks.Include(c => c.Comments).AsQueryable(); // AsQueryable allows filtering

            // Filter by Company Name
            if (!string.IsNullOrWhiteSpace(query.CompanyName))
            {
                stocks = stocks.Where(s => s.CompanyName.Contains(query.CompanyName));
            }

            //  Filter by Symbol
            if (!string.IsNullOrWhiteSpace(query.Symbol))
            {
                stocks = stocks.Where(s => s.Symbol.Contains(query.Symbol));
            }

            // Sort by (Expandable)
            if (!string.IsNullOrWhiteSpace(query.SortBy))
            {
                // Sort by Symbol
                if (query.SortBy.Equals("Symbol", StringComparison.OrdinalIgnoreCase))
                {
                    stocks = query.IsDescending ? stocks.OrderByDescending(s => s.Symbol) : stocks.OrderBy(s => s.Symbol);
                }

                // Add another Sort by ... if needed
            }
            
            return await stocks.ToListAsync();
        }

        public async Task<Stock?> GetByIdAsync(int id)
        {
            return await _context.Stocks.Include(c => c.Comments).FirstOrDefaultAsync(s => s.Id == id);   // (Previously: returned null comments | Now: returns Comments collection)
        }

        public Task<bool> StockExists(int id)
        {
            return _context.Stocks.AnyAsync(s => s.Id == id);
        }

        public async Task<Stock> CreateAsync(Stock stockModel)
        {
            await _context.Stocks.AddAsync(stockModel);
            await _context.SaveChangesAsync();
            return stockModel;
        }

        public async Task<Stock?> UpdateAsync(int id, Stock stockModel)
        {
            var existingStock = await _context.Stocks.FindAsync(id);

            if(existingStock == null)
            {
                return null;
            }

            existingStock.Symbol = stockModel.Symbol;
            existingStock.CompanyName = stockModel.CompanyName;
            existingStock.Purchase = stockModel.Purchase;
            existingStock.LastDiv = stockModel.LastDiv;
            existingStock.Industry = stockModel.Industry;
            existingStock.MarketCap = stockModel.MarketCap;

            await _context.SaveChangesAsync();
            return existingStock;
        }

        public async Task<Stock?> DeleteAsync(int id)
        {
            var stockModel = await _context.Stocks.FirstOrDefaultAsync(x => x.Id == id);
            
            if(stockModel == null)
            {
                return null;
            }

            _context.Stocks.Remove(stockModel);
            await _context.SaveChangesAsync();
            return stockModel;
        }
    }
}